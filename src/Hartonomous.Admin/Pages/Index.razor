@page "/"
@implements IDisposable
@inject AdminTelemetryCache TelemetryCache

<div class="dashboard-grid">
    <section class="dashboard-card">
        <div class="dashboard-card__title">Total Models</div>
        <div class="dashboard-card__value">@_snapshot.TotalModels</div>
        <div>Last updated @(_snapshot.CapturedAt == DateTimeOffset.MinValue ? "n/a" : _snapshot.CapturedAt.ToLocalTime().ToString("T"))</div>
    </section>
    <section class="dashboard-card">
        <div class="dashboard-card__title">Total Parameters</div>
    <div class="dashboard-card__value">@FormatNumber(_snapshot.TotalParameters)</div>
        <div>Layers tracked @_snapshot.TotalLayers</div>
    </section>
    <section class="dashboard-card">
        <div class="dashboard-card__title">Recent Operations</div>
        <ul>
            @foreach (var op in _snapshot.RecentOperations.Take(5))
            {
                <li>@op.OperationType â€” @op.State (@op.Detail)</li>
            }
        </ul>
    </section>
</div>

<section style="margin-top:2rem;">
    <h2>Architecture Breakdown</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Architecture</th>
                <th>Models</th>
            </tr>
        </thead>
        <tbody>
            @if (_snapshot.ArchitectureBreakdown.Count == 0)
            {
                <tr>
                    <td colspan="2">No models ingested yet.</td>
                </tr>
            }
            else
            {
                foreach (var kvp in _snapshot.ArchitectureBreakdown)
                {
                    <tr>
                        <td>@kvp.Key</td>
                        <td>@kvp.Value</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</section>

@code {
    private AdminDashboardSnapshot _snapshot = AdminDashboardSnapshot.Empty;

    protected override void OnInitialized()
    {
        _snapshot = TelemetryCache.Snapshot;
        TelemetryCache.SnapshotUpdated += OnSnapshotUpdated;
    }

    private void OnSnapshotUpdated(object? sender, AdminDashboardSnapshot snapshot)
    {
        _snapshot = snapshot;
        _ = InvokeAsync(StateHasChanged);
    }

    private static string FormatNumber(long value)
    {
        if (value >= 1_000_000_000)
        {
            return $"{value / 1_000_000_000d:F2}B";
        }

        if (value >= 1_000_000)
        {
            return $"{value / 1_000_000d:F2}M";
        }

        if (value >= 1_000)
        {
            return $"{value / 1_000d:F1}K";
        }

        return value.ToString();
    }

    public void Dispose()
    {
        TelemetryCache.SnapshotUpdated -= OnSnapshotUpdated;
    }
}
