@page "/extraction"
@inject AdminOperationService OperationService

<h1>Model Extraction Studio</h1>

@if (!string.IsNullOrEmpty(_feedback))
{
    <div class="@( _isError ? "alert-error" : "alert-success" )">@_feedback</div>
}

@if (_models.Count == 0)
{
    <p>No source models available. Ingest a model first.</p>
}
else
{
    <div class="dashboard-card" style="margin-top:1.5rem;">
        <div class="form-field">
            <label for="model-select">Parent model</label>
            <select id="model-select" @bind="_selectedModelId">
                @foreach (var model in _models)
                {
                    <option value="@model.ModelId">@model.ModelName (@model.ModelType)</option>
                }
            </select>
        </div>
    </div>

    <div class="dashboard-grid" style="margin-top:1.5rem;">
        <section class="dashboard-card">
            <h2>By Importance Ratio</h2>
            <div class="form-field">
                <label>Target size ratio</label>
                <input type="number" step="0.05" min="0.1" max="1" @bind="_targetRatio" />
            </div>
            <button class="button" @onclick="QueueImportanceAsync" disabled="@_isSubmitting">Create student</button>
        </section>

        <section class="dashboard-card">
            <h2>By Layer Count</h2>
            <div class="form-field">
                <label>Layer count</label>
                <input type="number" min="1" @bind="_targetLayerCount" />
            </div>
            <button class="button" @onclick="QueueLayersAsync" disabled="@_isSubmitting">Extract layers</button>
        </section>

        <section class="dashboard-card">
            <h2>By Spatial Band</h2>
            <div class="form-field">
                <label>Minimum value</label>
                <input type="number" step="0.1" @bind="_spatialMin" />
            </div>
            <div class="form-field">
                <label>Maximum value</label>
                <input type="number" step="0.1" @bind="_spatialMax" />
            </div>
            <button class="button" @onclick="QueueSpatialAsync" disabled="@_isSubmitting">Extract band</button>
        </section>
    </div>

    <section style="margin-top:2rem;">
        <h2>Comparison</h2>
        <div class="dashboard-card">
            <div class="form-field">
                <label for="comparison-target">Compare with model</label>
                <select id="comparison-target" @bind="_compareModelId">
                    <option value="0">Select model</option>
                    @foreach (var model in _models)
                    {
                        if (model.ModelId != _selectedModelId)
                        {
                            <option value="@model.ModelId">@model.ModelName</option>
                        }
                    }
                </select>
            </div>
            <button class="button" @onclick="QueueComparisonAsync" disabled="@(_isSubmitting || _compareModelId == 0)">Compare models</button>
        </div>
    </section>
}

@code {
    private readonly List<Model> _models = new();
    private int _selectedModelId;
    private double _targetRatio = 0.5;
    private int _targetLayerCount = 12;
    private double _spatialMin = -1;
    private double _spatialMax = 1;
    private int _compareModelId;
    private string? _feedback;
    private bool _isError;
    private bool _isSubmitting;

    protected override async Task OnInitializedAsync()
    {
        var models = await OperationService.GetModelsAsync().ConfigureAwait(false);
        _models.AddRange(models.OrderBy(m => m.ModelName));
        _selectedModelId = _models.FirstOrDefault()?.ModelId ?? 0;
    }

    private async Task QueueImportanceAsync()
    {
        await QueueOperationAsync(() => OperationService.QueueStudentModelByRatioAsync(_selectedModelId, _targetRatio));
    }

    private async Task QueueLayersAsync()
    {
        await QueueOperationAsync(() => OperationService.QueueStudentModelByLayersAsync(_selectedModelId, _targetLayerCount));
    }

    private async Task QueueSpatialAsync()
    {
        await QueueOperationAsync(() => OperationService.QueueStudentModelBySpatialWindowAsync(_selectedModelId, _spatialMin, _spatialMax));
    }

    private async Task QueueComparisonAsync()
    {
        await QueueOperationAsync(() => OperationService.QueueModelComparisonAsync(_selectedModelId, _compareModelId));
    }

    private async Task QueueOperationAsync(Func<Task<AdminOperationStatus>> enqueue)
    {
        _isSubmitting = true;
        _feedback = null;
        _isError = false;

        try
        {
            var status = await enqueue().ConfigureAwait(false);
            _feedback = $"Queued operation {status.OperationId}";
            _isError = status.State == AdminOperationState.Failed;
        }
        catch (Exception ex)
        {
            _feedback = ex.Message;
            _isError = true;
        }
        finally
        {
            _isSubmitting = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}
