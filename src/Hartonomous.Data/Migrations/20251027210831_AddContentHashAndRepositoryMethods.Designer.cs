// <auto-generated />
using System;
using Hartonomous.Data;
using Microsoft.Data.SqlTypes;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hartonomous.Data.Migrations
{
    [DbContext(typeof(HartonomousDbContext))]
    [Migration("20251027210831_AddContentHashAndRepositoryMethods")]
    partial class AddContentHashAndRepositoryMethods
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "10.0.0-rc.2.25502.107")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hartonomous.Core.Entities.CachedActivation", b =>
                {
                    b.Property<long>("CacheId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CacheId"));

                    b.Property<SqlVector<float>?>("ActivationOutput")
                        .HasColumnType("VECTOR(1998)");

                    b.Property<long>("ComputeTimeSavedMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<long>("HitCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<byte[]>("InputHash")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("binary(32)");

                    b.Property<DateTime>("LastAccessed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<long>("LayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("OutputShape")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CacheId");

                    b.HasIndex("LayerId");

                    b.HasIndex("LastAccessed", "HitCount")
                        .IsDescending()
                        .HasDatabaseName("idx_cache_usage");

                    b.HasIndex("ModelId", "LayerId", "InputHash")
                        .IsUnique()
                        .HasDatabaseName("idx_cache_lookup");

                    b.ToTable("CachedActivations", "dbo");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.Embedding", b =>
                {
                    b.Property<long>("EmbeddingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EmbeddingId"));

                    b.Property<int>("AccessCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ContentHash")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<int>("Dimension")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(768);

                    b.Property<SqlVector<float>?>("EmbeddingFull")
                        .HasColumnType("VECTOR(768)")
                        .HasColumnName("embedding_full");

                    b.Property<string>("EmbeddingModel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("SourceText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("SpatialProjX")
                        .HasColumnType("float");

                    b.Property<double?>("SpatialProjY")
                        .HasColumnType("float");

                    b.Property<double?>("SpatialProjZ")
                        .HasColumnType("float");

                    b.HasKey("EmbeddingId");

                    b.HasIndex("ContentHash")
                        .HasDatabaseName("idx_content_hash");

                    b.ToTable("Embeddings_Production", "dbo");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.InferenceRequest", b =>
                {
                    b.Property<long>("InferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("InferenceId"));

                    b.Property<bool>("CacheHit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("EnsembleStrategy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InputData")
                        .HasColumnType("JSON");

                    b.Property<byte[]>("InputHash")
                        .HasMaxLength(32)
                        .HasColumnType("binary(32)");

                    b.Property<int?>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("ModelsUsed")
                        .HasColumnType("JSON");

                    b.Property<string>("OutputData")
                        .HasColumnType("JSON");

                    b.Property<string>("OutputMetadata")
                        .HasColumnType("JSON");

                    b.Property<DateTime>("RequestTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("TaskType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TotalDurationMs")
                        .HasColumnType("int");

                    b.Property<string>("UserFeedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("UserRating")
                        .HasColumnType("tinyint");

                    b.HasKey("InferenceId");

                    b.HasIndex("CacheHit")
                        .HasDatabaseName("idx_cache_hit");

                    b.HasIndex("InputHash")
                        .HasDatabaseName("idx_input_hash");

                    b.HasIndex("ModelId");

                    b.HasIndex("RequestTimestamp")
                        .IsDescending()
                        .HasDatabaseName("idx_timestamp");

                    b.HasIndex("TaskType")
                        .HasDatabaseName("idx_task_type");

                    b.ToTable("InferenceRequests", "dbo");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.InferenceStep", b =>
                {
                    b.Property<long>("StepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StepId"));

                    b.Property<bool>("CacheUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("DurationMs")
                        .HasColumnType("int");

                    b.Property<string>("IndexUsed")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("InferenceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LayerId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("OperationType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("QueryText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RowsExamined")
                        .HasColumnType("bigint");

                    b.Property<long?>("RowsReturned")
                        .HasColumnType("bigint");

                    b.Property<int>("StepNumber")
                        .HasColumnType("int");

                    b.HasKey("StepId");

                    b.HasIndex("ModelId");

                    b.HasIndex("InferenceId", "StepNumber")
                        .HasDatabaseName("idx_inference_steps");

                    b.ToTable("InferenceSteps", "dbo");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.Model", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModelId"));

                    b.Property<string>("Architecture")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("AverageInferenceMs")
                        .HasColumnType("float");

                    b.Property<string>("Config")
                        .HasColumnType("JSON");

                    b.Property<DateTime>("IngestionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ModelType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("ParameterCount")
                        .HasColumnType("bigint");

                    b.Property<long>("UsageCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.HasKey("ModelId");

                    b.HasIndex("ModelName")
                        .HasDatabaseName("idx_model_name");

                    b.HasIndex("ModelType")
                        .HasDatabaseName("idx_model_type");

                    b.ToTable("Models", "dbo");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.ModelLayer", b =>
                {
                    b.Property<long>("LayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LayerId"));

                    b.Property<double?>("AvgComputeTimeMs")
                        .HasColumnType("float");

                    b.Property<double?>("CacheHitRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<int>("LayerIdx")
                        .HasColumnType("int");

                    b.Property<string>("LayerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LayerType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<long?>("ParameterCount")
                        .HasColumnType("bigint");

                    b.Property<string>("Parameters")
                        .HasColumnType("JSON");

                    b.Property<double?>("QuantizationScale")
                        .HasColumnType("float");

                    b.Property<string>("QuantizationType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double?>("QuantizationZeroPoint")
                        .HasColumnType("float");

                    b.Property<SqlVector<float>?>("Weights")
                        .HasColumnType("VECTOR(1998)");

                    b.HasKey("LayerId");

                    b.HasIndex("LayerType")
                        .HasDatabaseName("idx_layer_type");

                    b.HasIndex("ModelId", "LayerIdx")
                        .HasDatabaseName("idx_model_layer");

                    b.ToTable("ModelLayers", "dbo");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.ModelMetadata", b =>
                {
                    b.Property<int>("MetadataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MetadataId"));

                    b.Property<int?>("EmbeddingDimension")
                        .HasColumnType("int");

                    b.Property<string>("License")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("MaxInputLength")
                        .HasColumnType("int");

                    b.Property<int?>("MaxOutputLength")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("PerformanceMetrics")
                        .HasColumnType("JSON");

                    b.Property<string>("SourceUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SupportedModalities")
                        .HasColumnType("JSON");

                    b.Property<string>("SupportedTasks")
                        .HasColumnType("JSON");

                    b.Property<string>("TrainingDataset")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateOnly?>("TrainingDate")
                        .HasColumnType("date");

                    b.HasKey("MetadataId");

                    b.HasIndex("ModelId")
                        .IsUnique();

                    b.ToTable("ModelMetadata", "dbo");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.TokenVocabulary", b =>
                {
                    b.Property<long>("VocabId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("VocabId"));

                    b.Property<SqlVector<float>?>("Embedding")
                        .HasColumnType("VECTOR(768)");

                    b.Property<int?>("EmbeddingDim")
                        .HasColumnType("int");

                    b.Property<long>("Frequency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TokenId")
                        .HasColumnType("int");

                    b.Property<string>("TokenType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("VocabId");

                    b.HasIndex("ModelId", "Token")
                        .HasDatabaseName("idx_token_text");

                    b.HasIndex("ModelId", "TokenId")
                        .IsUnique()
                        .HasDatabaseName("idx_model_token");

                    b.ToTable("TokenVocabulary", "dbo");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.CachedActivation", b =>
                {
                    b.HasOne("Hartonomous.Core.Entities.ModelLayer", "Layer")
                        .WithMany("CachedActivations")
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hartonomous.Core.Entities.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Layer");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.InferenceRequest", b =>
                {
                    b.HasOne("Hartonomous.Core.Entities.Model", null)
                        .WithMany("InferenceRequests")
                        .HasForeignKey("ModelId");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.InferenceStep", b =>
                {
                    b.HasOne("Hartonomous.Core.Entities.InferenceRequest", "InferenceRequest")
                        .WithMany("Steps")
                        .HasForeignKey("InferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hartonomous.Core.Entities.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("InferenceRequest");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.ModelLayer", b =>
                {
                    b.HasOne("Hartonomous.Core.Entities.Model", "Model")
                        .WithMany("Layers")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.ModelMetadata", b =>
                {
                    b.HasOne("Hartonomous.Core.Entities.Model", "Model")
                        .WithOne("Metadata")
                        .HasForeignKey("Hartonomous.Core.Entities.ModelMetadata", "ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.TokenVocabulary", b =>
                {
                    b.HasOne("Hartonomous.Core.Entities.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.InferenceRequest", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.Model", b =>
                {
                    b.Navigation("InferenceRequests");

                    b.Navigation("Layers");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.ModelLayer", b =>
                {
                    b.Navigation("CachedActivations");
                });
#pragma warning restore 612, 618
        }
    }
}
