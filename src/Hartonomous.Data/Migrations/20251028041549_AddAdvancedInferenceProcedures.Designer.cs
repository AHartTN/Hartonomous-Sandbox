// <auto-generated />
using System;
using Hartonomous.Data;
using Microsoft.Data.SqlTypes;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace Hartonomous.Data.Migrations
{
    [DbContext(typeof(HartonomousDbContext))]
    [Migration("20251028041549_AddAdvancedInferenceProcedures")]
    partial class AddAdvancedInferenceProcedures
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "10.0.0-rc.2.25502.107")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hartonomous.Core.Entities.AudioData", b =>
                {
                    b.Property<long>("AudioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("audio_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AudioId"));

                    b.Property<long>("DurationMs")
                        .HasColumnType("bigint")
                        .HasColumnName("duration_ms");

                    b.Property<string>("Format")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("format");

                    b.Property<SqlVector<float>?>("GlobalEmbedding")
                        .HasColumnType("VECTOR(768)")
                        .HasColumnName("global_embedding");

                    b.Property<int?>("GlobalEmbeddingDim")
                        .HasColumnType("int")
                        .HasColumnName("global_embedding_dim");

                    b.Property<DateTime?>("IngestionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("ingestion_date")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<Geometry>("MelSpectrogram")
                        .HasColumnType("GEOMETRY")
                        .HasColumnName("mel_spectrogram");

                    b.Property<string>("Metadata")
                        .HasColumnType("JSON")
                        .HasColumnName("metadata");

                    b.Property<byte>("NumChannels")
                        .HasColumnType("tinyint")
                        .HasColumnName("num_channels");

                    b.Property<byte[]>("RawData")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("raw_data");

                    b.Property<int>("SampleRate")
                        .HasColumnType("int")
                        .HasColumnName("sample_rate");

                    b.Property<string>("SourcePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("source_path");

                    b.Property<Geometry>("Spectrogram")
                        .HasColumnType("GEOMETRY")
                        .HasColumnName("spectrogram");

                    b.Property<Geometry>("WaveformLeft")
                        .HasColumnType("GEOMETRY")
                        .HasColumnName("waveform_left");

                    b.Property<Geometry>("WaveformRight")
                        .HasColumnType("GEOMETRY")
                        .HasColumnName("waveform_right");

                    b.HasKey("AudioId");

                    b.HasIndex("DurationMs")
                        .HasDatabaseName("idx_duration");

                    b.HasIndex("IngestionDate")
                        .IsDescending()
                        .HasDatabaseName("idx_ingestion");

                    b.ToTable("AudioData", "dbo");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.AudioFrame", b =>
                {
                    b.Property<long>("AudioId")
                        .HasColumnType("bigint")
                        .HasColumnName("audio_id");

                    b.Property<long>("FrameNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("frame_number");

                    b.Property<float?>("AmplitudeL")
                        .HasColumnType("real")
                        .HasColumnName("amplitude_l");

                    b.Property<float?>("AmplitudeR")
                        .HasColumnType("real")
                        .HasColumnName("amplitude_r");

                    b.Property<SqlVector<float>?>("FrameEmbedding")
                        .HasColumnType("VECTOR(768)")
                        .HasColumnName("frame_embedding");

                    b.Property<SqlVector<float>?>("Mfcc")
                        .HasColumnType("VECTOR(13)")
                        .HasColumnName("mfcc");

                    b.Property<float?>("RmsEnergy")
                        .HasColumnType("real")
                        .HasColumnName("rms_energy");

                    b.Property<float?>("SpectralCentroid")
                        .HasColumnType("real")
                        .HasColumnName("spectral_centroid");

                    b.Property<float?>("SpectralRolloff")
                        .HasColumnType("real")
                        .HasColumnName("spectral_rolloff");

                    b.Property<long>("TimestampMs")
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp_ms");

                    b.Property<float?>("ZeroCrossingRate")
                        .HasColumnType("real")
                        .HasColumnName("zero_crossing_rate");

                    b.HasKey("AudioId", "FrameNumber");

                    b.ToTable("AudioFrames", "dbo");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.CachedActivation", b =>
                {
                    b.Property<long>("CacheId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CacheId"));

                    b.Property<SqlVector<float>?>("ActivationOutput")
                        .HasColumnType("VECTOR(1998)");

                    b.Property<long>("ComputeTimeSavedMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<long>("HitCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<byte[]>("InputHash")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("binary(32)");

                    b.Property<DateTime>("LastAccessed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<long>("LayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("OutputShape")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CacheId");

                    b.HasIndex("LayerId");

                    b.HasIndex("LastAccessed", "HitCount")
                        .IsDescending()
                        .HasDatabaseName("idx_cache_usage");

                    b.HasIndex("ModelId", "LayerId", "InputHash")
                        .IsUnique()
                        .HasDatabaseName("idx_cache_lookup");

                    b.ToTable("CachedActivations", "dbo");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.Embedding", b =>
                {
                    b.Property<long>("EmbeddingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EmbeddingId"));

                    b.Property<int>("AccessCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ContentHash")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<int>("Dimension")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(768);

                    b.Property<SqlVector<float>?>("EmbeddingFull")
                        .HasColumnType("VECTOR(768)")
                        .HasColumnName("embedding_full");

                    b.Property<string>("EmbeddingModel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("SourceText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("SpatialProjX")
                        .HasColumnType("float");

                    b.Property<double?>("SpatialProjY")
                        .HasColumnType("float");

                    b.Property<double?>("SpatialProjZ")
                        .HasColumnType("float");

                    b.HasKey("EmbeddingId");

                    b.HasIndex("ContentHash")
                        .HasDatabaseName("idx_content_hash");

                    b.ToTable("Embeddings_Production", "dbo");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.Image", b =>
                {
                    b.Property<long>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("image_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ImageId"));

                    b.Property<long>("AccessCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("access_count");

                    b.Property<int>("Channels")
                        .HasColumnType("int")
                        .HasColumnName("channels");

                    b.Property<Geometry>("EdgeMap")
                        .HasColumnType("GEOMETRY")
                        .HasColumnName("edge_map");

                    b.Property<string>("Format")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("format");

                    b.Property<SqlVector<float>?>("GlobalEmbedding")
                        .HasColumnType("VECTOR(1536)")
                        .HasColumnName("global_embedding");

                    b.Property<int?>("GlobalEmbeddingDim")
                        .HasColumnType("int")
                        .HasColumnName("global_embedding_dim");

                    b.Property<int>("Height")
                        .HasColumnType("int")
                        .HasColumnName("height");

                    b.Property<DateTime?>("IngestionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("ingestion_date")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_accessed");

                    b.Property<string>("Metadata")
                        .HasColumnType("JSON")
                        .HasColumnName("metadata");

                    b.Property<Geometry>("ObjectRegions")
                        .HasColumnType("GEOMETRY")
                        .HasColumnName("object_regions");

                    b.Property<Geometry>("PixelCloud")
                        .HasColumnType("GEOMETRY")
                        .HasColumnName("pixel_cloud");

                    b.Property<byte[]>("RawData")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("raw_data");

                    b.Property<Geometry>("SaliencyRegions")
                        .HasColumnType("GEOMETRY")
                        .HasColumnName("saliency_regions");

                    b.Property<string>("SourcePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("source_path");

                    b.Property<string>("SourceUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("source_url");

                    b.Property<int>("Width")
                        .HasColumnType("int")
                        .HasColumnName("width");

                    b.HasKey("ImageId");

                    b.HasIndex("IngestionDate")
                        .IsDescending()
                        .HasDatabaseName("idx_ingestion");

                    b.HasIndex("Width", "Height")
                        .HasDatabaseName("idx_dimensions");

                    b.ToTable("Images", "dbo");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.ImagePatch", b =>
                {
                    b.Property<long>("PatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("patch_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PatchId"));

                    b.Property<Geometry>("DominantColor")
                        .HasColumnType("GEOMETRY")
                        .HasColumnName("dominant_color");

                    b.Property<long>("ImageId")
                        .HasColumnType("bigint")
                        .HasColumnName("image_id");

                    b.Property<float?>("MeanIntensity")
                        .HasColumnType("real")
                        .HasColumnName("mean_intensity");

                    b.Property<SqlVector<float>?>("PatchEmbedding")
                        .HasColumnType("VECTOR(768)")
                        .HasColumnName("patch_embedding");

                    b.Property<int>("PatchHeight")
                        .HasColumnType("int")
                        .HasColumnName("patch_height");

                    b.Property<Geometry>("PatchRegion")
                        .IsRequired()
                        .HasColumnType("GEOMETRY")
                        .HasColumnName("patch_region");

                    b.Property<int>("PatchWidth")
                        .HasColumnType("int")
                        .HasColumnName("patch_width");

                    b.Property<int>("PatchX")
                        .HasColumnType("int")
                        .HasColumnName("patch_x");

                    b.Property<int>("PatchY")
                        .HasColumnType("int")
                        .HasColumnName("patch_y");

                    b.Property<float?>("StdIntensity")
                        .HasColumnType("real")
                        .HasColumnName("std_intensity");

                    b.Property<byte[]>("TextureFeatures")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("texture_features");

                    b.HasKey("PatchId");

                    b.HasIndex("ImageId", "PatchX", "PatchY")
                        .HasDatabaseName("idx_image_patches");

                    b.ToTable("ImagePatches", "dbo");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.InferenceRequest", b =>
                {
                    b.Property<long>("InferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("InferenceId"));

                    b.Property<bool>("CacheHit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("EnsembleStrategy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InputData")
                        .HasColumnType("JSON");

                    b.Property<byte[]>("InputHash")
                        .HasMaxLength(32)
                        .HasColumnType("binary(32)");

                    b.Property<int?>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("ModelsUsed")
                        .HasColumnType("JSON");

                    b.Property<string>("OutputData")
                        .HasColumnType("JSON");

                    b.Property<string>("OutputMetadata")
                        .HasColumnType("JSON");

                    b.Property<DateTime>("RequestTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("TaskType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TotalDurationMs")
                        .HasColumnType("int");

                    b.Property<string>("UserFeedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("UserRating")
                        .HasColumnType("tinyint");

                    b.HasKey("InferenceId");

                    b.HasIndex("CacheHit")
                        .HasDatabaseName("idx_cache_hit");

                    b.HasIndex("InputHash")
                        .HasDatabaseName("idx_input_hash");

                    b.HasIndex("ModelId");

                    b.HasIndex("RequestTimestamp")
                        .IsDescending()
                        .HasDatabaseName("idx_timestamp");

                    b.HasIndex("TaskType")
                        .HasDatabaseName("idx_task_type");

                    b.ToTable("InferenceRequests", "dbo");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.InferenceStep", b =>
                {
                    b.Property<long>("StepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StepId"));

                    b.Property<bool>("CacheUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("DurationMs")
                        .HasColumnType("int");

                    b.Property<string>("IndexUsed")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("InferenceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LayerId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("OperationType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("QueryText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RowsExamined")
                        .HasColumnType("bigint");

                    b.Property<long?>("RowsReturned")
                        .HasColumnType("bigint");

                    b.Property<int>("StepNumber")
                        .HasColumnType("int");

                    b.HasKey("StepId");

                    b.HasIndex("ModelId");

                    b.HasIndex("InferenceId", "StepNumber")
                        .HasDatabaseName("idx_inference_steps");

                    b.ToTable("InferenceSteps", "dbo");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.Model", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModelId"));

                    b.Property<string>("Architecture")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("AverageInferenceMs")
                        .HasColumnType("float");

                    b.Property<string>("Config")
                        .HasColumnType("JSON");

                    b.Property<DateTime>("IngestionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ModelType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("ParameterCount")
                        .HasColumnType("bigint");

                    b.Property<long>("UsageCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.HasKey("ModelId");

                    b.HasIndex("ModelName")
                        .HasDatabaseName("idx_model_name");

                    b.HasIndex("ModelType")
                        .HasDatabaseName("idx_model_type");

                    b.ToTable("Models", "dbo");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.ModelLayer", b =>
                {
                    b.Property<long>("LayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LayerId"));

                    b.Property<double?>("AvgComputeTimeMs")
                        .HasColumnType("float");

                    b.Property<double?>("CacheHitRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<int>("LayerIdx")
                        .HasColumnType("int");

                    b.Property<string>("LayerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LayerType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<long?>("ParameterCount")
                        .HasColumnType("bigint");

                    b.Property<string>("Parameters")
                        .HasColumnType("JSON");

                    b.Property<double?>("QuantizationScale")
                        .HasColumnType("float");

                    b.Property<string>("QuantizationType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double?>("QuantizationZeroPoint")
                        .HasColumnType("float");

                    b.Property<SqlVector<float>?>("Weights")
                        .HasColumnType("VECTOR(1998)");

                    b.HasKey("LayerId");

                    b.HasIndex("LayerType")
                        .HasDatabaseName("idx_layer_type");

                    b.HasIndex("ModelId", "LayerIdx")
                        .HasDatabaseName("idx_model_layer");

                    b.ToTable("ModelLayers", "dbo");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.ModelMetadata", b =>
                {
                    b.Property<int>("MetadataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MetadataId"));

                    b.Property<int?>("EmbeddingDimension")
                        .HasColumnType("int");

                    b.Property<string>("License")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("MaxInputLength")
                        .HasColumnType("int");

                    b.Property<int?>("MaxOutputLength")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("PerformanceMetrics")
                        .HasColumnType("JSON");

                    b.Property<string>("SourceUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SupportedModalities")
                        .HasColumnType("JSON");

                    b.Property<string>("SupportedTasks")
                        .HasColumnType("JSON");

                    b.Property<string>("TrainingDataset")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateOnly?>("TrainingDate")
                        .HasColumnType("date");

                    b.HasKey("MetadataId");

                    b.HasIndex("ModelId")
                        .IsUnique();

                    b.ToTable("ModelMetadata", "dbo");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.TextDocument", b =>
                {
                    b.Property<long>("DocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("doc_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DocId"));

                    b.Property<long>("AccessCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("access_count");

                    b.Property<int?>("CharCount")
                        .HasColumnType("int")
                        .HasColumnName("char_count");

                    b.Property<SqlVector<float>?>("GlobalEmbedding")
                        .HasColumnType("VECTOR(768)")
                        .HasColumnName("global_embedding");

                    b.Property<int?>("GlobalEmbeddingDim")
                        .HasColumnType("int")
                        .HasColumnName("global_embedding_dim");

                    b.Property<DateTime?>("IngestionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("ingestion_date")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("language");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_accessed");

                    b.Property<string>("Metadata")
                        .HasColumnType("JSON")
                        .HasColumnName("metadata");

                    b.Property<string>("RawText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("raw_text");

                    b.Property<float?>("SentimentScore")
                        .HasColumnType("real")
                        .HasColumnName("sentiment_score");

                    b.Property<string>("SourcePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("source_path");

                    b.Property<string>("SourceUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("source_url");

                    b.Property<SqlVector<float>?>("TopicVector")
                        .HasColumnType("VECTOR(100)")
                        .HasColumnName("topic_vector");

                    b.Property<float?>("Toxicity")
                        .HasColumnType("real")
                        .HasColumnName("toxicity");

                    b.Property<int?>("WordCount")
                        .HasColumnType("int")
                        .HasColumnName("word_count");

                    b.HasKey("DocId");

                    b.ToTable("TextDocuments", "dbo");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.TokenVocabulary", b =>
                {
                    b.Property<long>("VocabId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("VocabId"));

                    b.Property<SqlVector<float>?>("Embedding")
                        .HasColumnType("VECTOR(768)");

                    b.Property<int?>("EmbeddingDim")
                        .HasColumnType("int");

                    b.Property<long>("Frequency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TokenId")
                        .HasColumnType("int");

                    b.Property<string>("TokenType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("VocabId");

                    b.HasIndex("ModelId", "Token")
                        .HasDatabaseName("idx_token_text");

                    b.HasIndex("ModelId", "TokenId")
                        .IsUnique()
                        .HasDatabaseName("idx_model_token");

                    b.ToTable("TokenVocabulary", "dbo");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.Video", b =>
                {
                    b.Property<long>("VideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("video_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("VideoId"));

                    b.Property<long>("DurationMs")
                        .HasColumnType("bigint")
                        .HasColumnName("duration_ms");

                    b.Property<string>("Format")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("format");

                    b.Property<int>("Fps")
                        .HasColumnType("int")
                        .HasColumnName("fps");

                    b.Property<SqlVector<float>?>("GlobalEmbedding")
                        .HasColumnType("VECTOR(768)")
                        .HasColumnName("global_embedding");

                    b.Property<int?>("GlobalEmbeddingDim")
                        .HasColumnType("int")
                        .HasColumnName("global_embedding_dim");

                    b.Property<DateTime?>("IngestionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("ingestion_date")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Metadata")
                        .HasColumnType("JSON")
                        .HasColumnName("metadata");

                    b.Property<long>("NumFrames")
                        .HasColumnType("bigint")
                        .HasColumnName("num_frames");

                    b.Property<byte[]>("RawData")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("raw_data");

                    b.Property<int>("ResolutionHeight")
                        .HasColumnType("int")
                        .HasColumnName("resolution_height");

                    b.Property<int>("ResolutionWidth")
                        .HasColumnType("int")
                        .HasColumnName("resolution_width");

                    b.Property<string>("SourcePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("source_path");

                    b.HasKey("VideoId");

                    b.HasIndex("IngestionDate")
                        .IsDescending()
                        .HasDatabaseName("idx_ingestion");

                    b.HasIndex("ResolutionWidth", "ResolutionHeight")
                        .HasDatabaseName("idx_resolution");

                    b.ToTable("Videos", "dbo");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.VideoFrame", b =>
                {
                    b.Property<long>("FrameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("frame_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FrameId"));

                    b.Property<SqlVector<float>?>("FrameEmbedding")
                        .HasColumnType("VECTOR(768)")
                        .HasColumnName("frame_embedding");

                    b.Property<long>("FrameNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("frame_number");

                    b.Property<Geometry>("MotionVectors")
                        .HasColumnType("GEOMETRY")
                        .HasColumnName("motion_vectors");

                    b.Property<Geometry>("ObjectRegions")
                        .HasColumnType("GEOMETRY")
                        .HasColumnName("object_regions");

                    b.Property<Geometry>("OpticalFlow")
                        .HasColumnType("GEOMETRY")
                        .HasColumnName("optical_flow");

                    b.Property<byte[]>("PerceptualHash")
                        .HasMaxLength(8)
                        .HasColumnType("varbinary(8)")
                        .HasColumnName("perceptual_hash");

                    b.Property<Geometry>("PixelCloud")
                        .HasColumnType("GEOMETRY")
                        .HasColumnName("pixel_cloud");

                    b.Property<long>("TimestampMs")
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp_ms");

                    b.Property<long>("VideoId")
                        .HasColumnType("bigint")
                        .HasColumnName("video_id");

                    b.HasKey("FrameId");

                    b.HasIndex("VideoId", "FrameNumber")
                        .IsUnique()
                        .HasDatabaseName("idx_video_frame");

                    b.HasIndex("VideoId", "TimestampMs")
                        .HasDatabaseName("idx_timestamp");

                    b.ToTable("VideoFrames", "dbo");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.AudioFrame", b =>
                {
                    b.HasOne("Hartonomous.Core.Entities.AudioData", "Audio")
                        .WithMany("Frames")
                        .HasForeignKey("AudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audio");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.CachedActivation", b =>
                {
                    b.HasOne("Hartonomous.Core.Entities.ModelLayer", "Layer")
                        .WithMany("CachedActivations")
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hartonomous.Core.Entities.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Layer");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.ImagePatch", b =>
                {
                    b.HasOne("Hartonomous.Core.Entities.Image", "Image")
                        .WithMany("Patches")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.InferenceRequest", b =>
                {
                    b.HasOne("Hartonomous.Core.Entities.Model", null)
                        .WithMany("InferenceRequests")
                        .HasForeignKey("ModelId");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.InferenceStep", b =>
                {
                    b.HasOne("Hartonomous.Core.Entities.InferenceRequest", "InferenceRequest")
                        .WithMany("Steps")
                        .HasForeignKey("InferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hartonomous.Core.Entities.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("InferenceRequest");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.ModelLayer", b =>
                {
                    b.HasOne("Hartonomous.Core.Entities.Model", "Model")
                        .WithMany("Layers")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.ModelMetadata", b =>
                {
                    b.HasOne("Hartonomous.Core.Entities.Model", "Model")
                        .WithOne("Metadata")
                        .HasForeignKey("Hartonomous.Core.Entities.ModelMetadata", "ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.TokenVocabulary", b =>
                {
                    b.HasOne("Hartonomous.Core.Entities.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.VideoFrame", b =>
                {
                    b.HasOne("Hartonomous.Core.Entities.Video", "Video")
                        .WithMany("Frames")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.AudioData", b =>
                {
                    b.Navigation("Frames");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.Image", b =>
                {
                    b.Navigation("Patches");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.InferenceRequest", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.Model", b =>
                {
                    b.Navigation("InferenceRequests");

                    b.Navigation("Layers");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.ModelLayer", b =>
                {
                    b.Navigation("CachedActivations");
                });

            modelBuilder.Entity("Hartonomous.Core.Entities.Video", b =>
                {
                    b.Navigation("Frames");
                });
#pragma warning restore 612, 618
        }
    }
}
